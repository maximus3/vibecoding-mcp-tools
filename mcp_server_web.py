"""MCP —Å–µ—Ä–≤–µ—Ä —Å —Ç—É–ª–æ–π `ask_user`.

–¢—É–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º —á–µ—Ä–µ–∑ Web Speech API),
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ LLM. –†–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ, —Å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º —Å–µ—Å—Å–∏–∏,
—Ç–∞–π–º–∞—É—Ç–æ–º –æ–∂–∏–¥–∞–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤.
"""

import argparse
import asyncio
import contextlib
import json
import logging
import pathlib
import socket
import sys
import time
import typing
import uuid
import webbrowser

import fastapi
import mcp.server.fastmcp.server as fastmcp_server
import pydantic
import starlette.middleware.cors as starlette_cors
import uvicorn


logger = logging.getLogger('ask_user_mcp_web')


def _setup_logging(level: str = 'INFO') -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞: –≤ stderr –∏ —Ñ–∞–π–ª `.logs/mcp_server_web.log`."""
    log_level = getattr(logging, level.upper(), logging.INFO)
    logger.setLevel(log_level)

    formatter = logging.Formatter('%(asctime)s | %(levelname)s | %(name)s | %(message)s')

    if not any(isinstance(h, logging.StreamHandler) for h in logger.handlers):
        sh = logging.StreamHandler(stream=sys.stderr)
        sh.setLevel(log_level)
        sh.setFormatter(formatter)
        logger.addHandler(sh)

    try:
        project_root = pathlib.Path(__file__).resolve().parent
        logs_dir = project_root / '.logs'
        logs_dir.mkdir(parents=True, exist_ok=True)
        log_file = logs_dir / 'mcp_server_web.log'
        if not any(isinstance(h, logging.FileHandler) for h in logger.handlers):
            fh = logging.FileHandler(log_file, encoding='utf-8')
            fh.setLevel(log_level)
            fh.setFormatter(formatter)
            logger.addHandler(fh)
    except Exception:
        logger.exception('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä (web)')


def _build_html(
    question: str,
    placeholder: str | None,
    quick_answers: list[str] | None,
    hints: list[str] | None,
    token: str,
) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É (–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π UI) —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º JS.

    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—ë–º–Ω–æ–π/—Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã —á–µ—Ä–µ–∑ prefers-color-scheme
    - –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (quick_answers)
    - –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (hints)
    - –ú–∏–∫—Ä–æ—Ñ–æ–Ω (Web Speech API) —Å –ø–æ–Ω—è—Ç–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    """
    data = {
        'question': question,
        'placeholder': placeholder or '',
        'quick_answers': quick_answers or [],
        'hints': hints or [],
        'token': token,
    }
    data_json = json.dumps(data, ensure_ascii=False)

    # –ù–µ–±–æ–ª—å—à–æ–π, —Å—Ç—Ä–æ–≥–∏–π, —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π HTML. –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É INITIAL_STATE.
    # ruff: noqa: E501
    return f"""
<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å</title>
  <style>
    :root {{
      --bg: #ffffff;
      --fg: #111111;
      --muted: #666666;
      --primary: #0057ff;
      --danger: #d33;
      --ok: #2d8a34;
      --surface: #f5f5f7;
      --border: #d0d0d0;
    }}
    @media (prefers-color-scheme: dark) {{
      :root {{
        --bg: #0c0c0d;
        --fg: #f0f0f0;
        --muted: #aaaaaa;
        --primary: #6ca0ff;
        --danger: #ff6b6b;
        --ok: #5ed16a;
        --surface: #161618;
        --border: #2a2a2e;
      }}
    }}
    html, body {{ margin: 0; padding: 0; background: var(--bg); color: var(--fg); font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', sans-serif; }}
    .overlay {{ position: fixed; inset: 0; display: grid; place-items: center; background: color-mix(in oklab, var(--bg) 70%, black 30%); padding: 24px; }}
    .modal {{ width: min(720px, 92vw); background: var(--surface); border: 1px solid var(--border); border-radius: 12px; box-shadow: 0 12px 32px rgba(0,0,0,.35); padding: 20px; }}
    .title {{ font-size: 20px; font-weight: 700; margin: 4px 0 12px; }}
    .question {{ font-size: 18px; font-weight: 700; margin: 0 0 12px; color: var(--fg); background: var(--surface); border: 1px solid var(--border); border-radius: 10px; padding: 10px 12px; }}
    .muted {{ color: var(--muted); font-size: 13px; }}
    .row {{ display: flex; gap: 8px; align-items: center; flex-wrap: wrap; }}
    .quick-answers {{ margin: 8px 0 16px; display: flex; flex-wrap: wrap; gap: 10px; }}
    .qa-title {{ font-weight: 700; margin: 6px 0 4px; }}
    .hint-btn {{ padding: 8px 12px; border-radius: 10px; border: 2px solid var(--primary); background: transparent; color: var(--primary); cursor: pointer; font-weight: 600; }}
    .hint-btn:hover {{ background: var(--primary); color: white; }}
    .hints-text {{ color: var(--muted); font-size: 13px; margin: 4px 0 8px; }}
    textarea {{ width: 100%; min-height: 100px; resize: vertical; padding: 10px 12px; border-radius: 8px; border: 1px solid var(--border); background: var(--bg); color: var(--fg); font-size: 14px; }}
    .controls {{ display: flex; gap: 10px; align-items: center; margin-top: 12px; }}
    .btn {{ padding: 10px 14px; border-radius: 10px; border: 1px solid var(--border); background: var(--bg); color: var(--fg); cursor: pointer; font-weight: 600; }}
    .btn.primary {{ background: var(--primary); border-color: var(--primary); color: white; }}
    .btn.danger {{ background: var(--danger); border-color: var(--danger); color: white; }}
    .status {{ font-size: 13px; color: var(--muted); min-width: 160px; }}
    .ok {{ color: var(--ok); }}
    .error {{ color: var(--danger); }}
    .footer {{ margin-top: 10px; font-size: 12px; color: var(--muted); }}
    .confirm {{ margin-top: 12px; padding: 10px 12px; border: 1px solid var(--border); background: var(--bg); border-radius: 8px; }}
  </style>
</head>
<body>
  <div class="overlay">
    <div class="modal">
      <div class="title">–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å</div>
      <div class="question" id="question"></div>
      <div class="hints-text" id="hintsText"></div>
      <div class="qa-title" id="qaTitle" style="display:none;">–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã</div>
      <div class="quick-answers" id="quickAnswers"></div>
      <textarea id="answer" placeholder=""></textarea>
      <div class="controls">
        <button class="btn" id="micBtn">üéôÔ∏è –ú–∏–∫—Ä–æ—Ñ–æ–Ω</button>
        <button class="btn primary" id="sendBtn">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        <span class="status" id="status"></span>
      </div>
      <div class="footer" id="footer"></div>
      <div class="confirm" id="confirm" style="display:none;">–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —ç—Ç–æ –æ–∫–Ω–æ –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.</div>
    </div>
  </div>

  <script>
  const INITIAL_STATE = {data_json};
  const pageStart = performance.now();
  const questionEl = document.getElementById('question');
  const hintsTextEl = document.getElementById('hintsText');
  const qaTitleEl = document.getElementById('qaTitle');
  const quickAnswersEl = document.getElementById('quickAnswers');
  const answerEl = document.getElementById('answer');
  const micBtn = document.getElementById('micBtn');
  const sendBtn = document.getElementById('sendBtn');
  const statusEl = document.getElementById('status');
  const footerEl = document.getElementById('footer');
  const confirmEl = document.getElementById('confirm');

  questionEl.textContent = INITIAL_STATE.question || '';
  answerEl.placeholder = INITIAL_STATE.placeholder || '';
  // Auto-focus textarea on open
  setTimeout(() => {{ try {{ answerEl.focus(); }} catch (_) {{}} }}, 0);

  // Quick answers (buttons)
  if (Array.isArray(INITIAL_STATE.quick_answers) && INITIAL_STATE.quick_answers.length) {{
    qaTitleEl.style.display = '';
    INITIAL_STATE.quick_answers.forEach((h) => {{
      const b = document.createElement('button');
      b.className = 'hint-btn';
      b.type = 'button';
      b.textContent = h;
      b.addEventListener('click', () => {{
        answerEl.value = h;
        sourceChoice = 'text';
      }});
      quickAnswersEl.appendChild(b);
    }});
  }} else {{
    quickAnswersEl.style.display = 'none';
  }}

  // Textual hints
  if (Array.isArray(INITIAL_STATE.hints) && INITIAL_STATE.hints.length) {{
    hintsTextEl.textContent = '–ü–æ–¥—Å–∫–∞–∑–∫–∏: ' + INITIAL_STATE.hints.join(' ‚Ä¢ ');
  }} else {{
    hintsTextEl.style.display = 'none';
  }}

  // Voice recognition
  let sourceChoice = 'text';
  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  let recognition = null;
  let recognizing = false;
  if (!SpeechRecognition) {{
    footerEl.textContent = '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ. –î–æ—Å—Ç—É–ø–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥.';
  }} else {{
    recognition = new SpeechRecognition();
    recognition.lang = 'ru-RU';
    recognition.continuous = false;
    recognition.interimResults = true;

    recognition.onstart = () => {{ recognizing = true; statusEl.textContent = '–°–ª—É—à–∞–µ–º‚Ä¶'; }};
    recognition.onerror = (e) => {{ recognizing = false; statusEl.textContent = '–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è'; console.error(e); }};
    recognition.onend = () => {{ recognizing = false; statusEl.textContent = '–ü–∞—É–∑–∞'; }};
    recognition.onresult = (event) => {{
      let finalText = '';
      for (let i = event.resultIndex; i < event.results.length; i++) {{
        const r = event.results[i];
        if (r.isFinal) {{ finalText += r[0].transcript; }}
      }}
      if (finalText) {{
        answerEl.value = finalText.trim();
        sourceChoice = 'voice';
        statusEl.textContent = '–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ';
      }}
    }};
  }}

  micBtn.addEventListener('click', async () => {{
    if (!recognition) {{
      alert('–í —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –Ω–µ—Ç Web Speech API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤—Ä—É—á–Ω—É—é.');
      return;
    }}
    try {{
      if (!recognizing) {{
        recognition.start();
      }} else {{
        recognition.stop();
      }}
    }} catch (err) {{
      console.error(err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤—Ä—É—á–Ω—É—é.');
    }}
  }});

  answerEl.addEventListener('input', () => {{ sourceChoice = 'text'; }});

  function tryAutoClose() {{
    // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏; –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const markConfirmed = () => {{
      confirmEl.style.display = 'block';
    }};
    try {{
      window.close();
    }} catch (_) {{}}
    setTimeout(() => {{
      if (!window.closed) {{
        try {{ window.open('', '_self'); window.close(); }} catch (_) {{}}
      }}
    }}, 50);
    setTimeout(() => {{
      if (!window.closed) {{ markConfirmed(); }}
    }}, 200);
  }}

  async function submitAnswer() {{
    const answer = (answerEl.value || '').trim();
    if (!answer) {{
      alert('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–ª–∏ –ø—Ä–æ–¥–∏–∫—Ç—É–π—Ç–µ –µ–≥–æ.');
      return;
    }}
    const payload = {{
      token: INITIAL_STATE.token,
      answer,
      source: sourceChoice,
      duration_ms: Math.round(performance.now() - pageStart),
    }};
    try {{
      const res = await fetch('/submit', {{
        method: 'POST',
        headers: {{ 'Content-Type': 'application/json' }},
        body: JSON.stringify(payload),
      }});
      if (!res.ok) {{
        const text = await res.text();
        throw new Error('–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π: ' + text);
      }}
      statusEl.textContent = '';
      sendBtn.disabled = true;
      micBtn.disabled = true;
      tryAutoClose();
    }} catch (e) {{
      console.error(e);
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: ' + (e && e.message ? e.message : e));
    }}
  }}

  sendBtn.addEventListener('click', submitAnswer);
  answerEl.addEventListener('keydown', (e) => {{
    if ((e.metaKey || e.ctrlKey) && e.key === 'Enter') {{ submitAnswer(); }}
  }});
  </script>
</body>
</html>
"""


# ruff: noqa: E501


def _find_free_port() -> int:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –Ω–∞ 127.0.0.1.

    –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫ –ø–æ—Ä—Ç—É 0 —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º —á—Ç–µ–Ω–∏–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—Ç–∞.
    –ù–µ–±–æ–ª—å—à–∞—è –≥–æ–Ω–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞, –Ω–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫—Ä–∞–π–Ω–µ –º–∞–ª–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è.
    """
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(('127.0.0.1', 0))
        return int(s.getsockname()[1])


class AskUserResult(pydantic.BaseModel):
    answer: str
    source: typing.Literal['text', 'voice']
    duration_ms: int


async def _run_web_dialog_session(  # noqa: C901
    question: str,
    placeholder: str | None,
    quick_answers: list[str] | None,
    hints: list[str] | None,
    timeout_seconds: int,
) -> 'AskUserResult':
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–µ–±‚Äë—Å–µ—Ä–≤–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (`--local`).
    """
    loop = asyncio.get_running_loop()
    answer_future: asyncio.Future[dict[str, typing.Any]] = loop.create_future()
    session_token = str(uuid.uuid4())
    session_started = time.monotonic()

    app = fastapi.FastAPI()

    app.add_middleware(
        starlette_cors.CORSMiddleware,
        allow_origin_regex=r'^http://127\.0\.0\.1:\\d+$',
        allow_methods=['POST'],
        allow_headers=['*'],
    )

    def session_url(port_value: int) -> str:
        return f'http://127.0.0.1:{port_value}/?t={session_token}'

    @app.get('/')
    async def index(t: str | None = None) -> fastapi.responses.Response:  # type: ignore[override]
        if t != session_token:
            return fastapi.responses.JSONResponse({'detail': 'invalid session token'}, status_code=403)
        html = _build_html(
            question=question,
            placeholder=placeholder,
            quick_answers=quick_answers,
            hints=hints,
            token=session_token,
        )
        return fastapi.responses.HTMLResponse(content=html)

    @app.post('/submit')
    async def submit(request: fastapi.Request) -> fastapi.responses.Response:  # type: ignore[override]
        try:
            payload = await request.json()
        except (json.JSONDecodeError, UnicodeDecodeError):
            return fastapi.responses.JSONResponse({'detail': 'invalid json'}, status_code=400)

        if not isinstance(payload, dict):
            return fastapi.responses.JSONResponse({'detail': 'invalid payload'}, status_code=400)

        if payload.get('token') != session_token:
            return fastapi.responses.JSONResponse({'detail': 'invalid session token'}, status_code=403)

        raw_answer = payload.get('answer')
        raw_source = payload.get('source')
        if not isinstance(raw_answer, str) or not raw_answer.strip():
            return fastapi.responses.JSONResponse({'detail': 'answer is required'}, status_code=400)
        if raw_source not in {'text', 'voice'}:
            return fastapi.responses.JSONResponse({'detail': 'source must be "text" or "voice"'}, status_code=400)

        duration_ms = int((time.monotonic() - session_started) * 1000)
        result = {
            'answer': raw_answer.strip(),
            'source': typing.cast('str', raw_source),
            'duration_ms': duration_ms,
        }
        if not answer_future.done():
            answer_future.set_result(result)
        return fastapi.responses.JSONResponse({'status': 'ok'})

    port = _find_free_port()

    config = uvicorn.Config(
        app=app,
        host='127.0.0.1',
        port=port,
        log_level='warning',
        access_log=False,
    )
    server = uvicorn.Server(config)

    server_task = asyncio.create_task(server.serve())
    await asyncio.sleep(0.2)
    webbrowser.open_new_tab(session_url(port))

    try:
        result_dict = await asyncio.wait_for(answer_future, timeout=float(timeout_seconds))
    except TimeoutError as exc:
        server.should_exit = True
        with contextlib.suppress(Exception):
            await asyncio.wait_for(server_task, timeout=3.0)
        raise TimeoutError('–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å—Ç–µ–∫–ª–æ.') from exc
    except Exception:
        server.should_exit = True
        with contextlib.suppress(Exception):
            await asyncio.wait_for(server_task, timeout=3.0)
        raise
    else:
        server.should_exit = True
        with contextlib.suppress(Exception):
            await asyncio.wait_for(server_task, timeout=3.0)
        return AskUserResult(**result_dict)


def create_server() -> fastmcp_server.FastMCP:  # noqa: C901
    """–°–æ–∑–¥–∞—ë—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç FastMCP-—Å–µ—Ä–≤–µ—Ä —Å —Ç—É–ª–æ–π `ask_user`."""
    server = fastmcp_server.FastMCP(
        name='ask-user-mcp',
        instructions='–õ–æ–∫–∞–ª—å–Ω–∞—è —Ç—É—Å–∞ ask_user –¥–ª—è –æ–ø—Ä–æ—Å–∞ —á–µ–ª–æ–≤–µ–∫–∞ (text/voice) —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä.',
    )

    @server.tool(
        name='ask_user',
        title='Ask User',
        description=(
            '–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (127.0.0.1) —Å –≤–æ–ø—Ä–æ—Å–æ–º, –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º –≤–≤–æ–¥–æ–º. '
            '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
        ),
    )
    async def ask_user(  # noqa: C901
        question: str,
        placeholder: str | None = None,
        quick_answers: list[str] | None = None,
        hints: list[str] | None = None,
        timeout_seconds: int = 180,
    ) -> AskUserResult:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - question: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        - placeholder: –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        - quick_answers: –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã (–∫–Ω–æ–ø–∫–∏, –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ)
        - hints: –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫ –≤–æ–ø—Ä–æ—Å—É/–æ—Ç–≤–µ—Ç—É (–Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ)
        - timeout_seconds: —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 180)

        –†–µ–∑—É–ª—å—Ç–∞—Ç:
        - answer: –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç (—Å—Ç—Ä–æ–∫–∞)
        - source: 'text' | 'voice'
        - duration_ms: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        loop = asyncio.get_running_loop()
        answer_future: asyncio.Future[dict[str, typing.Any]] = loop.create_future()
        session_token = str(uuid.uuid4())
        session_started = time.monotonic()

        # FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = fastapi.FastAPI()

        # CORS: —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ http://127.0.0.1:<port>
        app.add_middleware(
            starlette_cors.CORSMiddleware,
            allow_origin_regex=r'^http://127\.0\.0\.1:\\d+$',
            allow_methods=['POST'],
            allow_headers=['*'],
        )

        # –í—Å–ø–æ–º.
        def session_url(port_value: int) -> str:
            return f'http://127.0.0.1:{port_value}/?t={session_token}'

        # –†–æ—É—Ç—ã
        @app.get('/')
        async def index(t: str | None = None) -> fastapi.responses.Response:
            if t != session_token:
                return fastapi.responses.JSONResponse({'detail': 'invalid session token'}, status_code=403)
            html = _build_html(
                question=question,
                placeholder=placeholder,
                quick_answers=quick_answers,
                hints=hints,
                token=session_token,
            )
            return fastapi.responses.HTMLResponse(content=html)

        @app.post('/submit')
        async def submit(request: fastapi.Request) -> fastapi.responses.Response:
            try:
                payload = await request.json()
            except (json.JSONDecodeError, UnicodeDecodeError):
                return fastapi.responses.JSONResponse({'detail': 'invalid json'}, status_code=400)

            if not isinstance(payload, dict):
                return fastapi.responses.JSONResponse({'detail': 'invalid payload'}, status_code=400)

            if payload.get('token') != session_token:
                return fastapi.responses.JSONResponse({'detail': 'invalid session token'}, status_code=403)

            raw_answer = payload.get('answer')
            raw_source = payload.get('source')
            if not isinstance(raw_answer, str) or not raw_answer.strip():
                return fastapi.responses.JSONResponse({'detail': 'answer is required'}, status_code=400)
            if raw_source not in {'text', 'voice'}:
                return fastapi.responses.JSONResponse({'detail': 'source must be "text" or "voice"'}, status_code=400)

            # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—á–∏—Ç–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            duration_ms = int((time.monotonic() - session_started) * 1000)
            result = {
                'answer': raw_answer.strip(),
                'source': typing.cast('str', raw_source),
                'duration_ms': duration_ms,
            }
            if not answer_future.done():
                answer_future.set_result(result)
            return fastapi.responses.JSONResponse({'status': 'ok'})

        # –í—ã–±–∏—Ä–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        port = _find_free_port()

        # CORS —É–∂–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω allow_origin_regex = 127.0.0.1:<port>

        config = uvicorn.Config(
            app=app,
            host='127.0.0.1',
            port=port,
            log_level='warning',
            access_log=False,
        )
        server = uvicorn.Server(config)

        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
        server_task = asyncio.create_task(server.serve())

        # –î–∞–¥–∏–º —à–∞–Ω—Å —Å–µ—Ä–≤–µ—Ä—É —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å, –∑–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
        await asyncio.sleep(0.2)
        webbrowser.open_new_tab(session_url(port))

        # –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞, –ø—Ä–∏ –ª—é–±–æ–º –∏—Å—Ö–æ–¥–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        try:
            result_dict = await asyncio.wait_for(answer_future, timeout=float(timeout_seconds))
        except TimeoutError as exc:
            # –¢–∞–π–º–∞—É—Ç ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º MCP-–æ—à–∏–±–∫—É TimeoutError
            server.should_exit = True
            with contextlib.suppress(Exception):
                await asyncio.wait_for(server_task, timeout=3.0)
            msg = '–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å—Ç–µ–∫–ª–æ.'
            raise TimeoutError(msg) from exc
        except Exception:
            server.should_exit = True
            with contextlib.suppress(Exception):
                await asyncio.wait_for(server_task, timeout=3.0)
            raise
        else:
            server.should_exit = True
            with contextlib.suppress(Exception):
                await asyncio.wait_for(server_task, timeout=3.0)
            return AskUserResult(**result_dict)

    return server


def _run_local_from_stdin() -> int:
    """–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: —á–∏—Ç–∞–µ—Ç JSON –∏–∑ stdin, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–µ–±‚Äë—Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ stdout.

    –í—Ö–æ–¥ (stdin, JSON):
    {
      "question": str,
      "placeholder": str | null,
      "quick_answers": list[str] | null,
      "hints": list[str] | null,
      "timeout_seconds": int | null
    }
    –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞:
      0 ‚Äî —É—Å–ø–µ—Ö, stdout —Å–æ–¥–µ—Ä–∂–∏—Ç JSON {answer, source, duration_ms}
      1 ‚Äî –æ—à–∏–±–∫–∞/—Ç–∞–π–º–∞—É—Ç
    """
    try:
        stdin_text = sys.stdin.read()
        params = json.loads(stdin_text) if stdin_text else {}
    except Exception:
        logger.exception('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ stdin (local)')
        return 1

    question = params.get('question') or ''
    if not isinstance(question, str) or not question.strip():
        logger.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä question')
        return 1

    placeholder = params.get('placeholder') if isinstance(params.get('placeholder'), str) else None
    quick_answers = params.get('quick_answers') if isinstance(params.get('quick_answers'), list) else None
    hints = params.get('hints') if isinstance(params.get('hints'), list) else None
    timeout_seconds_raw = params.get('timeout_seconds')
    timeout_seconds = int(timeout_seconds_raw) if isinstance(timeout_seconds_raw, int) else 180

    try:
        result = asyncio.run(
            _run_web_dialog_session(
                question=question,
                placeholder=placeholder,
                quick_answers=typing.cast('list[str] | None', quick_answers),
                hints=typing.cast('list[str] | None', hints),
                timeout_seconds=timeout_seconds,
            )
        )
    except TimeoutError:
        logger.error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ')  # noqa: TRY400
        return 1
    except Exception:
        logger.exception('–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞')
        return 1

    try:
        sys.stdout.write(json.dumps(result.model_dump(), ensure_ascii=False))
        sys.stdout.flush()
    except Exception:
        logger.exception('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ stdout')
        return 1

    return 0


def main() -> None:
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument('--local', action='store_true')
    parser.add_argument('--log-level', choices=('DEBUG', 'INFO', 'WARNING', 'ERROR'), default='WARNING')
    args = parser.parse_args()

    _setup_logging(args.log_level)
    logger.info('–°—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞: —Ä–µ–∂–∏–º=%s, log_level=%s', 'local' if args.local else 'server', args.log_level)

    if args.local:
        exit_code = _run_local_from_stdin()
        raise SystemExit(exit_code)

    server = create_server()
    server.run(transport='stdio')


if __name__ == '__main__':
    main()
